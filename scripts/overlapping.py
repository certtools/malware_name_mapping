#!/usr/bin/python3

# SPDX-FileCopyrightText: 2018 nic.at GmbH
# SPDX-FileCopyrightText: 2023 Institute for Common Good Technology commongoodtechnology.org
#
# SPDX-License-Identifier: CC0-1.0

# -*- coding: utf-8 -*-
import sys

from common import load_mapping

try:
    import exrex
except ImportError:
    print("Error: Python module exrex is needed but not available.", file=sys.stderr)
    sys.exit(2)

expressions = {line[0] for line in load_mapping(include_malpedia=True)}


known = {}
overlaps = 0
error = False
for expression in expressions:
    try:
        generated = exrex.generate(expression)
    except Exception as exc:
        print('During generation of expression %r' % expression)
        print(exc)
        error = True
    for ind, result in enumerate(generated):
        if result in known:
            print('Found overlapping expressions %r and %r. Common value: %r' % (known[result], expression, result))
            overlaps += 1
        else:
            known[result] = expression
        if ind > 100:
            print('Stop generating expressions for %r.' % expression)
            break

if overlaps:
    print('Total number of overlaps: %d' % overlaps)
if overlaps or error:
    sys.exit(1)
